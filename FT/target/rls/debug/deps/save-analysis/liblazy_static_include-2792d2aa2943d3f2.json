{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5","program":"/Users/haitran/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","lazy_static_include","--edition=2018","/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=2792d2aa2943d3f2","-C","extra-filename=-2792d2aa2943d3f2","--out-dir","/Users/haitran/Hackathon_NEAR/NEAR_COURCE_K2/nft-marketplace-tutorial/FT/target/rls/debug/deps","-L","dependency=/Users/haitran/Hackathon_NEAR/NEAR_COURCE_K2/nft-marketplace-tutorial/FT/target/rls/debug/deps","--extern","lazy_static=/Users/haitran/Hackathon_NEAR/NEAR_COURCE_K2/nft-marketplace-tutorial/FT/target/rls/debug/deps/liblazy_static-890aa9dffdd68514.rmeta","--extern","slash_formatter=/Users/haitran/Hackathon_NEAR/NEAR_COURCE_K2/nft-marketplace-tutorial/FT/target/rls/debug/deps/libslash_formatter-5a917964360fc99e.rmeta","--extern","syn=/Users/haitran/Hackathon_NEAR/NEAR_COURCE_K2/nft-marketplace-tutorial/FT/target/rls/debug/deps/libsyn-b8de2b16b49e24e8.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/haitran/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/haitran/Hackathon_NEAR/NEAR_COURCE_K2/nft-marketplace-tutorial/FT/target/rls/debug/deps/liblazy_static_include-2792d2aa2943d3f2.rmeta"},"prelude":{"crate_id":{"name":"lazy_static_include","disambiguator":[13631848628841982759,0]},"crate_root":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src","external_crates":[{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7101137524639191865,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1887987468260230341,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11423829060327785168,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11467597086512816709,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11478090127832647137,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16011649288231704614,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12732930576792739361,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11329576585081918948,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17189205392791100154,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2953602047458512213,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[4833631622402917298,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[2052285648718182991,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16253613530580249776,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[5745760535571076062,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[7876989589743503273,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[14488000063334320346,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[5084180220498965168,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":18,"id":{"name":"lazy_static","disambiguator":[11258297254033253449,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":19,"id":{"name":"slash_formatter","disambiguator":[14848536241745204846,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":20,"id":{"name":"concat_with","disambiguator":[7288730138932311451,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":21,"id":{"name":"syn","disambiguator":[5317161084444604465,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":22,"id":{"name":"proc_macro","disambiguator":[1162530651274243115,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":23,"id":{"name":"proc_macro2","disambiguator":[11377083712564260520,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":24,"id":{"name":"unicode_xid","disambiguator":[10935703783742509477,0]}},{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","num":25,"id":{"name":"quote","disambiguator":[16100219419996434037,0]}}],"span":{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","byte_start":0,"byte_end":4529,"line_start":1,"line_end":128,"column_start":1,"column_end":23}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","byte_start":0,"byte_end":4529,"line_start":1,"line_end":128,"column_start":1,"column_end":23},"name":"","qualname":"::","value":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10}],"decl_id":null,"docs":"# Lazy Static Include","sig":null,"attributes":[{"value":"*\n# Lazy Static Include\n\nThis crate provides `lazy_static_include_bytes` and `lazy_static_include_str` macros to replace `include_bytes` and `include_str` macros.\n\nWhy should we do that?\nBecause the original `include_bytes` and `include_str` macros bring extra data from files into the compiled executable binary file, the time for compiling surges.\n\nHigh compilation time is detrimental to software development. `lazy_static_include_bytes` and `lazy_static_include_str` macros can help you **lazy load** data from files\nwhen you are not using the **release** profile. In other words, if you are using `include_bytes` and `include_str` macros, and you think your compilation time is too high to wait,\nyou can choose to use `lazy_static_include_bytes` and `lazy_static_include_str` macros.\n\n`lazy_static_include_bytes` and `lazy_static_include_str` macros include data from files into the compiled executable binary file **only** when you are using the **release** profile.\nBe careful when you distribute your program.\n\nThe paths used for `lazy_static_include_bytes` and `lazy_static_include_str` are relative to **CARGO_MANIFEST_DIR**.\n\n## Examples\n\n```rust\n#[macro_use] extern crate lazy_static_include;\n\nlazy_static_include_str! {\n    /// doc\n    TEST => \"data/test.txt\",\n    /// doc\n    pub TEST2 => \"data/test-2.txt\",\n}\n\nassert_eq!(\"This is just a test text.\", TEST);\nassert_eq!(\"Some text...\", TEST2);\n```\n\n```rust\n#[macro_use] extern crate lazy_static_include;\n\nlazy_static_include_bytes! {\n    /// doc\n    TEST => \"data/test.txt\",\n    /// doc\n    pub TEST2 => \"data/test-2.txt\",\n}\n\nassert_eq!(\"This is just a test text.\".as_bytes(), TEST);\nassert_eq!(\"Some text...\".as_bytes(), TEST2);\n```\n\nYou should notice that the value created from `lazy_static_include_bytes` and `lazy_static_include_str` macros isn't equal to `&'static [u8]` or `&'static str`. If you want to get an exact `&'static [u8]` or `&'static str` reference, you can **dereference** the value.\n\n```rust\n#[macro_use] extern crate lazy_static_include;\n\nlazy_static_include_bytes! {\n    /// doc\n    TEST => \"data/test.txt\",\n}\n\nlet data: &'static [u8] = *TEST;\n```\n\n## Include Array\n\nThere is a special macro `lazy_static_include_array` which can include arrays from files.\nThe array is fixed sized and can be one of these following types: `bool`, `char`, `usize`, `u8`, `u16`, `u32`, `u64`, `u128`, `isize`, `i8`, `i16`, `i32`, `i64`, `i128`, `f32`, `f64`, `&'static str`.\n\nAlso, the `lazy_static_include_array` macro includes data from files into the compiled executable binary file **only** when you are using the **release** profile.\nBe careful when you distribute your program.\n\nThe paths used for `lazy_static_include_array` are relative to **CARGO_MANIFEST_DIR**.\n\n```rust\n#[macro_use] extern crate lazy_static_include;\n\nlazy_static_include_array! {\n    /// doc\n    TEST: [u64; 5] => \"data/u64_array.txt\",\n    /// doc\n    pub TEST2: [&'static str; 3] => \"data/string_array.txt\"\n}\n\nassert_eq!(123, TEST[0]);\nassert_eq!(456, TEST[1]);\nassert_eq!(789, TEST[2]);\nassert_eq!(1000, TEST[3]);\nassert_eq!(500000000000u64, TEST[4]);\n\nassert_eq!(\"Hi\", TEST2[0]);\nassert_eq!(\"Hello\", TEST2[1]);\nassert_eq!(\"哈囉\", TEST2[2]);\n```\n\n## Benchmark\n\nUsing static mechanisms makes your program faster. See my benchmark result below (AMD Ryzen 9 3900X 12-Core Processor 12C/24T 3.90GHz, ran on 2020/07/02):\n\n```text\ntest include_array_lazy_static   ... bench:          46 ns/iter (+/- 3)\ntest include_array_native_static ... bench:          48 ns/iter (+/- 3)\ntest include_array_no_static     ... bench:      22,414 ns/iter (+/- 297)\ntest include_bytes_lazy_static   ... bench:         844 ns/iter (+/- 3)\ntest include_bytes_native_static ... bench:         863 ns/iter (+/- 5)\ntest include_bytes_no_static     ... bench:       4,764 ns/iter (+/- 189)\ntest include_str_lazy_static     ... bench:         857 ns/iter (+/- 8)\ntest include_str_native_static   ... bench:         842 ns/iter (+/- 10)\ntest include_str_no_static       ... bench:       4,837 ns/iter (+/- 145)\n```\n\nWhen using the **release** profile, the performance of `lazy_static_include_*` is very close to `include_*`. That means you don't need to worry about the overhead, but just enjoy the faster compilation time.\n\nYou can run the benchmark program by executing,\n\n```bash\ncargo bench\n```\n*/","span":{"file_name":"/Users/haitran/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy-static-include-3.0.5/src/lib.rs","byte_start":0,"byte_end":4321,"line_start":1,"line_end":115,"column_start":1,"column_end":3}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}